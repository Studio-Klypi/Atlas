generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication
enum Role {
  admin
  moderator
  accountant
  writer
  support
  member
}

model User {
  id        String    @id @default(cuid())
  //
  firstname String
  lastname  String
  roles     Role[]    @default([member])
  //
  email     String    @unique
  password  String
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  authSessions    AuthSession[]
  logsAsActor     AuditLog[]    @relation(name: "actor")
  logsAsTarget    AuditLog[]    @relation(name: "target")
  createdContacts Contact[]
  createdClients  Client[]

  @@map("users")
}

model AuthSession {
  token     String   @default(cuid())
  userId    String
  //
  agent     String
  //
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id(name: "key", fields: [token, userId])
  @@map("auth_sessions")
}

// Logging
enum TargetType {
  user
}

enum ActionStatus {
  success
  failure
}

model AuditLog {
  id         String       @id @default(cuid())
  //
  actorId    String?
  targetId   String?
  targetType TargetType?
  //
  action     String
  ip         String?
  agent      String?
  status     ActionStatus
  meta       String?
  //
  createdAt  DateTime     @default(now())

  actor  User? @relation(name: "actor", fields: [actorId], references: [id], onDelete: SetNull)
  target User? @relation(name: "target", fields: [targetId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// CRM
model Contact {
  id        String    @id @default(cuid())
  //
  firstname String
  lastname  String
  email     String    @db.Citext()
  phone     String?
  //
  notes     String?
  //
  createdBy String?
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  creator User?           @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  clients ClientContact[]

  @@unique([email, deletedAt])
  @@map("contacts")
}

enum ClientType {
  company
  individual
}

enum Currency {
  eur
  usd
}

model Client {
  id                 String     @id @default(cuid())
  //
  type               ClientType
  name               String
  legalForm          String?
  //
  street             String
  zip                String
  city               String
  country            String
  //
  registrationNumber String?
  siren              String?
  siret              String?
  vatNumber          String?
  billindCurrency    Currency   @default(eur)
  //
  email              String?
  phone              String?
  website            String?
  notes              String?
  //
  createdBy          String?
  //
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?

  creator  User?           @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  contacts ClientContact[]

  @@unique([siret, deletedAt])
  @@unique([registrationNumber, deletedAt])
  @@unique([vatNumber, deletedAt])
  @@map("clients")
}

model ClientContact {
  clientId         String
  contactId        String
  role             String
  isBillingContact Boolean  @default(false)
  emailOverride    String?
  //
  createdBy        String?
  //
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id(name: "key", [clientId, contactId])
  @@map("client_contacts")
}
